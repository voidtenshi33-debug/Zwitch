/**
 * @fileoverview Firestore Security Rules for Zwitch application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles. Only the authenticated user can create, read, update, or delete their own profile.
 *
 * Data Structure:
 * User profiles are stored under `/users/{userId}`, where `userId` corresponds to the Firebase Authentication UID.
 *
 * Key Security Decisions:
 * - Users can only manage their own profiles. Listing all users is disallowed to protect privacy.
 * - Data consistency is enforced by validating that the `userId` in the path matches the `id` field in the user document on creation and update.
 *
 * Denormalization for Authorization:
 * The `userId` is used in the path and is also present as the `id` field within the document. This denormalization allows for efficient ownership checks without additional reads.
 *
 * Structural Segregation:
 * User profiles are stored in a dedicated collection (`/users/{userId}`) separate from other data, providing clear separation of concerns and simplifying security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profiles. Only the authenticated user can manage their own profile.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with UID 'user_abc' can create their profile at /users/user_abc.
     * @allow (get) - Authenticated user with UID 'user_abc' can read their profile at /users/user_abc.
     * @allow (update) - Authenticated user with UID 'user_abc' can update their profile at /users/user_abc.
     * @allow (delete) - Authenticated user with UID 'user_abc' can delete their profile at /users/user_abc.
     * @deny (create) - Authenticated user with UID 'user_def' cannot create a profile at /users/user_abc.
     * @deny (get) - Authenticated user with UID 'user_def' cannot read profile from /users/user_abc.
     * @deny (update) - Authenticated user with UID 'user_def' cannot update the profile at /users/user_abc.
     * @deny (delete) - Authenticated user with UID 'user_def' cannot delete the profile at /users/user_abc.
     * @principle Enforces strict user-ownership for all profile operations.
     */
    match /users/{userId} {
      // Helper function to check if the authenticated user is the owner of the profile.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the owner of the existing profile
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow a user to get their own profile data.
      allow get: if isOwner(userId);

      // Prevent listing of all user profiles.
      allow list: if false;

      // Allow a user to create their own profile, enforcing the path consistency.
      allow create: if isOwner(userId) && request.resource.data.id == userId;

      // Allow a user to update their own profile, enforcing the path consistency and ensuring immutability of the id field.
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      // Allow a user to delete their own profile.
      allow delete: if isExistingOwner(userId);
    }
  }
}