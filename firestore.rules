/**
 * @fileoverview Firestore Security Rules for Zwitch application.
 *
 * Core Philosophy:
 * This ruleset prioritizes user data ownership and controls access to item listings.
 * Users can only manage their own profiles and create/modify their own items.
 * Read access to item listings is public, but modifications are restricted to the owner.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, where {userId} matches the Firebase Auth UID.
 * - /items/{itemId}: Stores item listings. Each item contains an 'ownerId' field indicating the creator.
 *
 * Key Security Decisions:
 * - Users can only read their profile, but can modify their profile.
 * - Item listings are publicly readable to facilitate discovery, but write access is owner-only.
 * - Listing operations are generally public.
 *
 * Denormalization for Authorization:
 * The 'Item' entity includes an `ownerId` field. This denormalization is CRUCIAL
 * for the security rules, because it allows rules on `/items/{itemId}` to quickly
 * verify ownership without needing to perform additional `get()` operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profiles.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get) User can read their own profile.
     * @allow (update) User can update their own profile.
     * @allow (delete) User can delete their own profile.
     * @deny (create) User cannot create a profile with a mismatched UID.
     * @deny (get) User cannot read another user's profile.
     * @deny (update) User cannot update another user's profile.
     * @deny (delete) User cannot delete another user's profile.
     * @principle Enforces user-ownership of profile data.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description Manages item listings.
     * @path /items/{itemId}
     * @allow (get, list) Anyone can read item listings.
     * @allow (create) User can create an item listing with their UID as the ownerId.
     * @allow (update) User can update an item listing if they are the owner.
     * @allow (delete) User can delete an item listing if they are the owner.
     * @deny (create) User cannot create an item listing with a mismatched ownerId.
     * @deny (update) User cannot update another user's item listing.
     * @deny (delete) User cannot delete another user's item listing.
     * @principle Allows public read access to item listings but restricts write access to the owner.
     */
    match /items/{itemId} {
      function isOwner(ownerId) {
        return request.auth != null && request.auth.uid == ownerId;
      }
       function isExistingOwner(ownerId) {
        return isOwner(ownerId) && resource != null;
      }
      allow get, list: if true;
      allow create: if isOwner(request.resource.data.ownerId);
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }
  }
}